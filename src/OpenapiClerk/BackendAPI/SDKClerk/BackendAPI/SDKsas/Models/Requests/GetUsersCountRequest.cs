//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace OpenapiClerk.BackendAPI.SDKClerk.BackendAPI.SDKsas.Models.Requests
{
    using OpenapiClerk.BackendAPI.SDKClerk.BackendAPI.SDKsas.Utils;
    using System.Collections.Generic;
    
    public class GetUsersCountRequest
    {

        /// <summary>
        /// Counts users with the specified email addresses.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 email addresses.<br/>
        /// Any email addresses not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=email_address")]
        public List<string>? EmailAddress { get; set; }

        /// <summary>
        /// Counts users with the specified phone numbers.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 phone numbers.<br/>
        /// Any phone numbers not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=phone_number")]
        public List<string>? PhoneNumber { get; set; }

        /// <summary>
        /// Counts users with the specified external ids.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 external ids.<br/>
        /// Any external ids not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=external_id")]
        public List<string>? ExternalId { get; set; }

        /// <summary>
        /// Counts users with the specified usernames.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 usernames.<br/>
        /// Any usernames not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=username")]
        public List<string>? Username { get; set; }

        /// <summary>
        /// Counts users with the specified web3 wallet addresses.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 web3 wallet addresses.<br/>
        /// Any web3 wallet addressed not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=web3_wallet")]
        public List<string>? Web3Wallet { get; set; }

        /// <summary>
        /// Counts users with the user ids specified.<br/>
        /// 
        /// <remarks>
        /// Accepts up to 100 user ids.<br/>
        /// Any user ids not found are ignored.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_id")]
        public List<string>? UserId { get; set; }

        /// <summary>
        /// Counts users that match the given query.<br/>
        /// 
        /// <remarks>
        /// For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.<br/>
        /// The query value doesn&apos;t need to match the exact value you are looking for, it is capable of partial matches as well.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")]
        public string? Query { get; set; }
    }
}