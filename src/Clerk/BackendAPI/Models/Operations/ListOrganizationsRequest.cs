//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using System.Collections.Generic;
    
    public class ListOrganizationsRequest
    {

        /// <summary>
        /// Flag to denote whether the member counts of each organization should be included in the response or not.
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_members_count")]
        public bool? IncludeMembersCount { get; set; }

        /// <summary>
        /// Flag to denote whether or not to include a member with elevated permissions who is not currently a member of the organization.
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=include_missing_member_with_elevated_permissions")]
        public bool? IncludeMissingMemberWithElevatedPermissions { get; set; }

        /// <summary>
        /// Returns organizations with ID, name, or slug that match the given query.<br/>
        /// 
        /// <remarks>
        /// Uses exact match for organization ID and partial match for name and slug.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")]
        public string? Query { get; set; }

        /// <summary>
        /// Returns organizations with the user ids specified. Any user ids not found are ignored.<br/>
        /// 
        /// <remarks>
        /// For each user id, the `+` and `-` can be prepended to the id, which denote whether the<br/>
        /// respective organization should be included or excluded from the result set.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_id")]
        public List<string>? UserId { get; set; }

        /// <summary>
        /// Returns organizations with the organization ids specified. Any organization ids not found are ignored.<br/>
        /// 
        /// <remarks>
        /// For each organization id, the `+` and `-` can be prepended to the id, which denote whether the<br/>
        /// respective organization should be included or excluded from the result set. Accepts up to 100 organization ids.<br/>
        /// Example: ?organization_id=+org_1&amp;organization_id=-org_2
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=organization_id")]
        public List<string>? OrganizationId { get; set; }

        /// <summary>
        /// Allows to return organizations in a particular order.<br/>
        /// 
        /// <remarks>
        /// At the moment, you can order the returned organizations either by their `name`, `created_at` or `members_count`.<br/>
        /// In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.<br/>
        /// For example, if you want organizations to be returned in descending order according to their `created_at` property, you can use `-created_at`.<br/>
        /// If you don&apos;t use `+` or `-`, then `+` is implied.<br/>
        /// Defaults to `-created_at`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")]
        public string? OrderBy { get; set; } = "-created_at";

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}