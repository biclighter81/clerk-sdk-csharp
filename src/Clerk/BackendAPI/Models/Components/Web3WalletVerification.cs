//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class Web3WalletVerificationType
    {
        private Web3WalletVerificationType(string value) { Value = value; }

        public string Value { get; private set; }
        public static Web3WalletVerificationType Web3Signature { get { return new Web3WalletVerificationType("Web3Signature"); } }
        
        public static Web3WalletVerificationType Web3WalletVerificationAdmin { get { return new Web3WalletVerificationType("Web3Wallet_verification_Admin"); } }
        
        public static Web3WalletVerificationType Null { get { return new Web3WalletVerificationType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(Web3WalletVerificationType v) { return v.Value; }
        public static Web3WalletVerificationType FromString(string v) {
            switch(v) {
                case "Web3Signature": return Web3Signature;
                case "Web3Wallet_verification_Admin": return Web3WalletVerificationAdmin;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for Web3WalletVerificationType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((Web3WalletVerificationType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Web3WalletVerification.Web3WalletVerificationConverter))]
    public class Web3WalletVerification {
        public Web3WalletVerification(Web3WalletVerificationType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public Web3Signature? Web3Signature { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Web3WalletVerificationAdmin? Web3WalletVerificationAdmin { get; set; }

        public Web3WalletVerificationType Type { get; set; }


        public static Web3WalletVerification CreateWeb3Signature(Web3Signature web3Signature) {
            Web3WalletVerificationType typ = Web3WalletVerificationType.Web3Signature;

            Web3WalletVerification res = new Web3WalletVerification(typ);
            res.Web3Signature = web3Signature;
            return res;
        }

        public static Web3WalletVerification CreateWeb3WalletVerificationAdmin(Web3WalletVerificationAdmin web3WalletVerificationAdmin) {
            Web3WalletVerificationType typ = Web3WalletVerificationType.Web3WalletVerificationAdmin;

            Web3WalletVerification res = new Web3WalletVerification(typ);
            res.Web3WalletVerificationAdmin = web3WalletVerificationAdmin;
            return res;
        }

        public static Web3WalletVerification CreateNull() {
            Web3WalletVerificationType typ = Web3WalletVerificationType.Null;
            return new Web3WalletVerification(typ);
        }

        public class Web3WalletVerificationConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Web3WalletVerification);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Web3WalletVerification(Web3WalletVerificationType.Web3WalletVerificationAdmin)
                    {
                        Web3WalletVerificationAdmin = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Web3WalletVerificationAdmin>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Web3WalletVerificationAdmin), new Web3WalletVerification(Web3WalletVerificationType.Web3WalletVerificationAdmin), "Web3WalletVerificationAdmin"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Web3WalletVerification(Web3WalletVerificationType.Web3Signature)
                    {
                        Web3Signature = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Web3Signature>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Web3Signature), new Web3WalletVerification(Web3WalletVerificationType.Web3Signature), "Web3Signature"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Web3WalletVerification res = (Web3WalletVerification)value;
                if (Web3WalletVerificationType.FromString(res.Type).Equals(Web3WalletVerificationType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Web3Signature != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Web3Signature));
                    return;
                }
                if (res.Web3WalletVerificationAdmin != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Web3WalletVerificationAdmin));
                    return;
                }

            }

        }

    }
}