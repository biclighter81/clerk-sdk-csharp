//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class VerificationType
    {
        private VerificationType(string value) { Value = value; }

        public string Value { get; private set; }
        public static VerificationType Otp { get { return new VerificationType("OTP"); } }
        
        public static VerificationType Admin { get { return new VerificationType("Admin"); } }
        
        public static VerificationType FromOAuth { get { return new VerificationType("FromOAuth"); } }
        
        public static VerificationType Null { get { return new VerificationType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(VerificationType v) { return v.Value; }
        public static VerificationType FromString(string v) {
            switch(v) {
                case "OTP": return Otp;
                case "Admin": return Admin;
                case "FromOAuth": return FromOAuth;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for VerificationType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((VerificationType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Verification.VerificationConverter))]
    public class Verification {
        public Verification(VerificationType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public Otp? Otp { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Admin? Admin { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public FromOAuth? FromOAuth { get; set; }

        public VerificationType Type { get; set; }


        public static Verification CreateOtp(Otp otp) {
            VerificationType typ = VerificationType.Otp;

            Verification res = new Verification(typ);
            res.Otp = otp;
            return res;
        }

        public static Verification CreateAdmin(Admin admin) {
            VerificationType typ = VerificationType.Admin;

            Verification res = new Verification(typ);
            res.Admin = admin;
            return res;
        }

        public static Verification CreateFromOAuth(FromOAuth fromOAuth) {
            VerificationType typ = VerificationType.FromOAuth;

            Verification res = new Verification(typ);
            res.FromOAuth = fromOAuth;
            return res;
        }

        public static Verification CreateNull() {
            VerificationType typ = VerificationType.Null;
            return new Verification(typ);
        }

        public class VerificationConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(Verification);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Verification(VerificationType.Otp)
                    {
                        Otp = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Otp>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Otp), new Verification(VerificationType.Otp), "Otp"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Verification(VerificationType.Admin)
                    {
                        Admin = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Admin>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Admin), new Verification(VerificationType.Admin), "Admin"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Verification(VerificationType.FromOAuth)
                    {
                        FromOAuth = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<FromOAuth>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(FromOAuth), new Verification(VerificationType.FromOAuth), "FromOAuth"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                Verification res = (Verification)value;
                if (VerificationType.FromString(res.Type).Equals(VerificationType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Otp != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Otp));
                    return;
                }
                if (res.Admin != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Admin));
                    return;
                }
                if (res.FromOAuth != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.FromOAuth));
                    return;
                }

            }

        }

    }
}